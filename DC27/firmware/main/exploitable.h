#ifndef __EXPLOITABLE_GAME__
#define __EXPLOITABLE_GAME__

#include <stdio.h>
#include <string.h>
#include "esp_system.h"
#include <esp_log.h>
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"
#include "freertos/queue.h"
#include "libesp/task.h"

#include "game_master.h"

QueueHandle_t GetExploitableGameQueue(void);

class ExploitableGameTask : public Task {
private:
	static const int GAME_QUEUE_SIZE = 3;
	static const int GAME_MSG_SIZE = sizeof(GameMsg);
	StaticQueue_t GameQueue;
	QueueHandle_t GameQueueHandle = nullptr;
	uint8_t gameQueueBuffer[GAME_QUEUE_SIZE*GAME_MSG_SIZE];

	void SendResponse(GameMsg* msg, char* data, uint8_t size);
	void SendCopyResponse(GameMsg* msg, char* copyme, uint8_t size);

	void commandHandler(GameMsg* msg);

public:
	const char *LOGTAG;
	ExploitableGameTask(const std::string &tName, uint16_t stackSize=10000, uint8_t priority=5);
	bool init();
	virtual void run(void* data);
	virtual ~ExploitableGameTask();
	QueueHandle_t getQueueHandle() {return GameQueueHandle;}
};

#endif //__EXPLOITABLE_GAME__
