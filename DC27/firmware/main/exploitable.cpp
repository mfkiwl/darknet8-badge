#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_log.h"

#include <nvs.h>
#include <nvs_flash.h>

#include "string.h"
#include "exploitable.h"
#include "game_master.h"

const char* EXPLOITABLE_LOGTAG = "ExploitableGame";

#define AVAILABLE_LEVELS (64)
uint32_t cur_level = 0;
void* levels[AVAILABLE_LEVELS];

uint32_t g_nvs_handle = 0;

static void setCurrentLevel(uint32_t lvlid)
{
	cur_level = lvlid;
	nvs_set_u32(g_nvs_handle, "exp_cur_level", cur_level);
	return;
}

static void secretLevel(GameMsg* msg)
{
	SendStringResponse(msg, "Welcome to the secret level! {Flag: zerpzerpzerp}\n\0");
	return;
}


static void level1(GameMsg* msg)
{
	const char* data = msg->data;
	struct {
		char boofer[16];
		uint32_t key;
	} packed;
	packed.key = 0x12345678;

	if (!msg->length)
	{
		SendStringResponse(msg, "Level 1\n");
		return;
	}

	if (data)
		strcpy(packed.boofer, data);

	if (packed.key == 0x42424242)
	{
		SendStringResponse(msg, "Very good: {flag: ZoopityDoopity}\n\0");
		// TODO: level 2
	}
	return;
}

static char exp0_flag[] = "Very Good! Now Echo This: ZOOP";
static void level0(GameMsg* msg)
{
	char* tmp = nullptr;
	char* ftmp = nullptr;
	int tmp_length = 0;
	if (!msg->length)
	{
		SendStringResponse(msg, "Level 0\n");
		SendStringResponse(msg, "You breath... and it echoes.\n");
		SendStringResponse(msg, "Wow you breath loudly.......\n");
		return;
	}

	if ((msg->length >= 4) && (!strncmp("ZOOP", msg->data, 4)))
	{
		SendStringResponse(msg, "flag{GreatGooglyMoogly}\n");
		SendStringResponse(msg, "level 1 unlocked\n");
		setCurrentLevel(1);
	}

	tmp_length = (strlen(exp0_flag) > msg->length) ? strlen(exp0_flag) : msg->length;
	tmp = (char*)malloc(tmp_length);
	snprintf(tmp, tmp_length, msg->data, exp0_flag);
	ftmp = (char*)malloc(msg->length + 1);
	memcpy(ftmp, tmp, msg->length);
	ftmp[msg->length] = '\n';
	free(tmp);
	SendResponse(msg, ftmp, msg->length + 1);
	return;
}

char initStr[] = "Welcome to the exploitable game\n";
void ExploitableGameTask::commandHandler(GameMsg* msg)
{
	ESP_LOGI(LOGTAG, "Exploitable Game Received a Message : %p", msg);

	if (!msg->data)
		SendCopyResponse(msg, initStr, strlen(initStr));

	((void (*)(GameMsg*))levels[cur_level])(msg);
	return;
}

#define CmdQueueTimeout ((TickType_t) 1000 / portTICK_PERIOD_MS)
void ExploitableGameTask::run(void* data)
{
	GameMsg* msg = nullptr;
	while(1)
	{
		if (xQueueReceive(this->GameQueueHandle, &msg, CmdQueueTimeout))
		{
			if (msg != nullptr)
			{
				this->commandHandler(msg);
				free(msg->data);
				free(msg);
			}
		}
	}
}

bool ExploitableGameTask::init()
{
	this->GameQueueHandle = xQueueCreateStatic(GAME_QUEUE_SIZE, GAME_MSG_SIZE,
		gameQueueBuffer, &GameQueue);

	// setup the level pointers, we do it this way so hopefully someone finds
	// the secret level :3
	levels[0] = (void*)level0;
	levels[1] = (void*)level1;

	levels[63] = (void*)secretLevel;

	if (nvs_open("storage", NVS_READWRITE, &g_nvs_handle) != ESP_OK)
	{
		ESP_LOGE(LOGTAG, "FAILED TO OPEN NVS");
		return false;
	}

	nvs_set_u32(g_nvs_handle, "exp_cur_level", 0);

	if (nvs_get_u32(g_nvs_handle, "exp_cur_level", &cur_level) != ESP_OK)
	{
		cur_level = 0;
		nvs_set_u32(g_nvs_handle, "exp_cur_level", cur_level);
	}

	return true;
}

ExploitableGameTask::ExploitableGameTask(const std::string &tName, uint16_t stackSize, uint8_t priority)
	: Task(tName, stackSize, priority)
{
	this->LOGTAG = EXPLOITABLE_LOGTAG;
	ESP_LOGI(LOGTAG, "Created");
}

ExploitableGameTask::~ExploitableGameTask()
{
	// TODO:
	ESP_LOGI(LOGTAG, "DESTROY");
}
